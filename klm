def compare_pcds_hive_data():
    try:
        pcds_output_path = "/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/stage/barclays/finance/SOX_FILES/pcds_data.csv"
        hive_output_path = "/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/stage/barclays/finance/SOX_FILES/hive_data.csv"
        final_output_path = "/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/stage/barclays/finance/SOX_FILES/complete_combined_csv.csv"

        # Load PCDS and Hive Intermediate Data
        pcds_df = pd.read_csv(pcds_output_path)
        hive_df = pd.read_csv(hive_output_path)

        # Merge both datasets on SOX_ELEMENT
        combined_df = pcds_df.merge(hive_df, on="SOX_ELEMENT", suffixes=("_SRC", "_TGT"))

        # Calculate variance
        combined_df["Actual_variance"] = combined_df["SRC_value"] - combined_df["Tgt_value"]
        combined_df["RULE_CATEGRORU"] = "Completeness"
        combined_df["Results"] = combined_df["Actual_variance"].apply(lambda x: "PASS" if x == 0 else "FAIL")

        # Reorder columns
        final_df = combined_df[["Src_Name", "Tgt_Name", "SOX_ELEMENT", "RULE_CATEGRORU", "Results", "SRC_value", "Tgt_value", "Actual_variance"]]

        # Save the final report
        final_df.to_csv(final_output_path, index=False)
        print(f"Final comparison report saved at: {final_output_path}")
        return final_df

    except Exception as e:
        print(f"Error comparing PCDS and Hive data: {e}")
        raise

# Example usage
if __name__ == "__main__":
    fetch_pcds_data()
    compare_pcds_hive_data()
