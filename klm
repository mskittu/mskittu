import json
import re
import uuid
import os

# Set base directory and file paths
base_dir = r"C:\Users\DELL\Documents\Json File"
ddl_file_path = os.path.join(base_dir, "ddl_input.sql")
json_file_path = os.path.join(base_dir, "ddl_output.json")

# Function to extract table name from DDL
def extract_table_name(ddl_str):
    match = re.search(r'CREATE\s+EXTERNAL\s+TABLE\s+`?(\w+)`?', ddl_str, re.IGNORECASE)
    return match.group(1) if match else "UnknownSchema"

# Function to extract column definitions and build JSON schema
def ddl_to_json_schema(ddl_str):
    table_name = extract_table_name(ddl_str)

    # Regex to match column name and datatype inside CREATE TABLE
    field_pattern = re.compile(r'`(\w+)`\s+([a-zA-Z0-9_(),]+)', re.IGNORECASE)
    fields = []

    for name, dtype in field_pattern.findall(ddl_str):
        fields.append({
            "name": name,
            "description": "",
            "dataType": dtype.strip()
        })

    return {
        "schema": {
            "schemaType": table_name,
            "uuid": str(uuid.uuid4()),
            "fields": fields
        }
    }

# Read DDL from file
with open(ddl_file_path, "r") as f:
    ddl_content = f.read()

# Generate JSON schema
json_schema = ddl_to_json_schema(ddl_content)

# Save JSON to file
with open(json_file_path, "w") as f:
    json.dump(json_schema, f, indent=2)

print(f"âœ… JSON schema saved with schemaType = table name at:\n{json_file_path}")
