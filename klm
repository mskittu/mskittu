import json
import warnings
from datetime import datetime

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from urllib3.exceptions import InsecureRequestWarning

# --- Config ---
BASE_URL = "https://<your-host>/"        # e.g. "https://prod.data-catalogue.<domain>/"
TIMEOUT = 30
VERIFY_SSL = False                       # change to True in prod
DEFAULT_HEADERS = {"Content-Type": "application/json"}

# Silence only the insecure-request warning when VERIFY_SSL is False
warnings.simplefilter("ignore", InsecureRequestWarning)


def build_session(max_retries: int = 5, backoff: float = 0.5) -> requests.Session:
    """
    Create a requests.Session with sane retries on transient failures.
    """
    s = requests.Session()
    retry = Retry(
        total=max_retries,
        connect=max_retries,
        read=max_retries,
        status=max_retries,
        backoff_factor=backoff,
        status_forcelist=(429, 500, 502, 503, 504),
        allowed_methods=("GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"),
        raise_on_status=False,
    )
    adapter = HTTPAdapter(max_retries=retry)
    s.mount("http://", adapter)
    s.mount("https://", adapter)
    s.verify = VERIFY_SSL
    s.headers.update(DEFAULT_HEADERS)
    return s


def create_refresh_token(username: str, password: str, client_name: str) -> str:
    """
    Logs in and returns a refresh token.
    Adjust the endpoint and payload keys to match your API.
    """
    url = f"{BASE_URL}api/v2/login/token/"     # ← example path; update if different
    payload = {
        "username": username,
        "password": password,
        "name": client_name
    }

    with build_session() as s:
        resp = s.post(url, json=payload, timeout=TIMEOUT)
        resp.raise_for_status()
        data = resp.json()
        # Try common fields; change to the exact field your API returns
        token = data.get("refresh_token") or data.get("token")
        if not token:
            raise ValueError(f"Unexpected login response: {data}")
        return token


def create_access_token(refresh_token: str) -> str:
    """
    Exchanges a refresh token for an access token.
    """
    url = f"{BASE_URL}api/v2/token/access/"    # ← example path; update if different
    payload = {"refresh_token": refresh_token}

    with build_session() as s:
        resp = s.post(url, json=payload, timeout=TIMEOUT)
        resp.raise_for_status()
        data = resp.json()
        token = data.get("access_token") or data.get("token")
        if not token:
            raise ValueError(f"Unexpected token response: {data}")
        return token


if __name__ == "__main__":
    USERNAME = "<user>"
    PASSWORD = "<pass>"
    CLIENT_NAME = "test"

    try:
        rtoken = create_refresh_token(USERNAME, PASSWORD, CLIENT_NAME)
        print("Refresh token:", rtoken)

        atoken = create_access_token(rtoken)
        print("Access token:", atoken)

    except requests.HTTPError as e:
        # Helpful diagnostics
        text = e.response.text if e.response is not None else ""
        print(f"HTTP error {getattr(e.response, 'status_code', '')}: {text}")
    except requests.RequestException as e:
        print(f"Network error: {e}")
    except Exception as e:
        print(f"Error: {e}")
