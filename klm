import os
import cx_Oracle
import pandas as pd
import subprocess

def fetch_pcds_data(attributes, pcds_table, output_path):
    try:
        # Oracle connection details
        db_name = "CDS"
        user_var = f"USERNAME_{db_name}"
        passwd_var = f"PWD_{db_name}"
        service_var = f"CONNECT_STRING_{db_name}"
        user_name = os.environ.get(user_var)
        passwd = os.environ.get(passwd_var)
        service_nm = os.environ.get(service_var)

        if not all([user_name, passwd, service_nm]):
            raise ValueError("Oracle environment variables are not set.")

        # Parse the service string
        service_nm = service_nm[service_nm.index('@') + 1:]
        host = service_nm[0:service_nm.index(':')]
        port = service_nm[service_nm.index(':') + 1:service_nm.index('/')]
        service_nm = service_nm[service_nm.index('/') + 1:]

        # Create a DSN
        dsn = cx_Oracle.makedsn(host, port, service_name=service_nm)

        # Establish a connection
        connection = cx_Oracle.connect(user=user_name, password=passwd, dsn=dsn)
        cursor = connection.cursor()

        # Construct SQL query
        attributes_str = ", ".join(attributes)
        query = f"""
        SELECT acct_bid AS ACCT_BID, {attributes_str}
        FROM {pcds_table}
        WHERE ROWNUM <= 100
        """
        cursor.execute(query)
        rows = cursor.fetchall()

        # Create DataFrame
        columns = [desc[0] for desc in cursor.description]
        data_df = pd.DataFrame(rows, columns=columns)

        cursor.close()
        connection.close()

        if data_df.empty:
            raise ValueError("PCDS query returned no data.")

        # Save PCDS data to the specified path
        data_df.to_csv(output_path, index=False)
        print(f"Fetched {len(data_df)} records from PCDS and saved to {output_path}")

        return data_df

    except Exception as e:
        print(f"Error while fetching data from PCDS: {e}")
        raise

def fetch_hive_data(output_path):
    try:
        # Hive query with LIMIT 100
        hive_query = """
        SELECT extrnl_acct_id, past_due_151_180_amt 
        FROM usrf_in.cds_acct_c
        LIMIT 100
        """

        # Execute Hive query and capture output
        hive_command = f"hive -e \"{hive_query}\""
        result = subprocess.run(hive_command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

        # Split the query output into rows
        rows = [line.split('\t') for line in result.stdout.strip().split('\n')]

        # Save Hive data to the specified path
        if rows:
            hive_columns = ["EXTRNL_ACCT_ID", "PAST_DUE_151_180_AMT"]
            hive_df = pd.DataFrame(rows, columns=hive_columns)
            hive_df.to_csv(output_path, index=False)
            print(f"Hive data saved to {output_path}")
            return hive_df
        else:
            raise ValueError("Hive query returned no data.")

    except subprocess.CalledProcessError as e:
        print(f"Error executing Hive query: {e.stderr}")
        raise

    except Exception as e:
        print(f"Error processing Hive output: {e}")
        raise

def compare_and_generate_report(pcds_data_path, hive_data_path, report_path):
    try:
        # Read PCDS and Hive data directly using Pandas
        pcds_df = pd.read_csv(pcds_data_path)
        hive_df = pd.read_csv(hive_data_path)

        # Validate required columns
        required_columns_pcds = {"ACCT_BID", "PAST_DUE_151_180_AMT"}
        required_columns_hive = {"EXTRNL_ACCT_ID", "PAST_DUE_151_180_AMT"}
        if not required_columns_pcds.issubset(set(pcds_df.columns)):
            raise ValueError(f"PCDS data missing required columns: {required_columns_pcds - set(pcds_df.columns)}")
        if not required_columns_hive.issubset(set(hive_df.columns)):
            raise ValueError(f"Hive data missing required columns: {required_columns_hive - set(hive_df.columns)}")

        # Merge and compare data
        merged_df = pd.merge(
            pcds_df, hive_df,
            left_on="ACCT_BID", right_on="EXTRNL_ACCT_ID",
            how="outer",
            suffixes=("_pcds", "_hive")
        )

        mismatches = merged_df[
            (merged_df["PAST_DUE_151_180_AMT_pcds"] != merged_df["PAST_DUE_151_180_AMT_hive"]) |
            (merged_df["ACCT_BID"].isna()) |
            (merged_df["EXTRNL_ACCT_ID"].isna())
        ]

        total_records = len(merged_df)
        mismatch_count = len(mismatches)
        accuracy = 100 if total_records == 0 else (1 - mismatch_count / total_records) * 100

        # Save accuracy report to the specified path
        report_data = {
            "Total Records": [total_records],
            "Mismatches": [mismatch_count],
            "Accuracy (%)": [accuracy]
        }
        report_df = pd.DataFrame(report_data)
        report_df.to_csv(report_path, index=False)
        print(f"Accuracy report saved to {report_path}")

        return accuracy

    except Exception as e:
        print(f"Error generating accuracy report: {e}")
        raise

# Main Execution
base_path = "/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/job/fin_recon"

try:
    # Fetch PCDS Data and Save to Local Path
    fetch_pcds_data(
        ["PAST_DUE_151_180_AMT"],
        "asp_eom_acct_sum",
        f"{base_path}/pcds_data.csv"
    )

    # Fetch Hive Data and Save to Local Path
    fetch_hive_data(f"{base_path}/hive_data.csv")

    # Compare Data and Generate Report
    compare_and_generate_report(
        f"{base_path}/pcds_data.csv",
        f"{base_path}/hive_data.csv",
        f"{base_path}/ppnr_accuracy_report.csv"
    )

    print(f"Final PPNR Accuracy Report saved to {base_path}/ppnr_accuracy_report.csv")

except Exception as e:
    print(f"Error during execution: {e}")
