import os
import pandas as pd
import cx_Oracle

def fetch_pcds_data():
    try:
        output_path = "/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/stage/barclays/finance/SOX_FILES/pcds_data.csv"

        # Fetch Oracle connection details from environment variables
        db_name = "CDS"
        user_var = f"USERNAME_{db_name}"
        passwd_var = f"PWD_{db_name}"
        service_var = f"CONNECT_STRING_{db_name}"
        user_name = os.environ.get(user_var)
        passwd = os.environ.get(passwd_var)
        service_nm = os.environ.get(service_var)

        # Validate if all required environment variables are set
        if not all([user_name, passwd, service_nm]):
            raise ValueError("Oracle environment variables are not set.")

        # Extract host, port, and service name from connection string
        service_nm = service_nm[service_nm.index('@') + 1:]
        host = service_nm[:service_nm.index(':')]
        port = service_nm[service_nm.index(':') + 1:service_nm.index('/')]
        service_nm = service_nm[service_nm.index('/') + 1:]

        # Create Oracle DSN and establish connection
        dsn = cx_Oracle.makedsn(host, port, service_name=service_nm)
        connection = cx_Oracle.connect(user=user_name, password=passwd, dsn=dsn)
        cursor = connection.cursor()

        # Define table name
        table_name = "ASP_EOM_ACCT_SUM"

        # Define query with column SUM calculations
        pcds_query = """
        SELECT 
            SUM(P1.EXTNL_ACCT_ID) AS EXTNL_ACCT_ID, 
            SUM(P1.FCFEE_CHGOFF_RVRSL_AMT) AS FCFEE_CHGOFF_RVRSL_AMT, 
            SUM(NVL(P1.FICO_SCORE_NBR,0)) AS FICO_SCORE_NBR,
            SUM(NVL(ASCII(P1.ACCT_STATUS_CD),0)) AS ACCT_STATUS_CD_SUM_SRC
        FROM DMT_ASP_DBA.ASP_EOM_ACCT_SUM P1 
        WHERE P1.RPTG_PRD_MNTH_BID = SUBSTR('20250131',0,6) 
        AND P1.PLTFM_CD = 'C'
        """

        # Execute query and fetch results
        cursor.execute(pcds_query)
        results = cursor.fetchall()[0]  # Fetch single row result
        columns = [desc[0] for desc in cursor.description]  # Extract column names dynamically

        cursor.close()
        connection.close()

        # Transform results into required CSV format
        pcds_data = {
            "Src_Table_Name": [table_name] * len(columns),
            "Src_Column_name": columns,
            "Results": list(results)
        }
        
        pcds_df = pd.DataFrame(pcds_data)

        # Save fetched data to CSV
        pcds_df.to_csv(output_path, index=False)
        print(f"PCDS data saved to {output_path}")
        return pcds_df

    except Exception as e:
        print(f"Error while fetching data from PCDS: {e}")
        raise
