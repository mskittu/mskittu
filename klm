import os
import pandas as pd
import cx_Oracle
import subprocess

def fetch_pcds_data():
    try:
        # Oracle connection details
        db_name = "CDS"
        user_var = f"USERNAME_{db_name}"
        passwd_var = f"PWD_{db_name}"
        service_var = f"CONNECT_STRING_{db_name}"
        user_name = os.environ.get(user_var)
        passwd = os.environ.get(passwd_var)
        service_nm = os.environ.get(service_var)

        if not all([user_name, passwd, service_nm]):
            raise ValueError("Oracle environment variables are not set.")

        # Parse the service string
        service_nm = service_nm[service_nm.index('@') + 1:]
        host = service_nm[:service_nm.index(':')]
        port = service_nm[service_nm.index(':') + 1:service_nm.index('/')]
        service_nm = service_nm[service_nm.index('/') + 1:]

        # Create a DSN
        dsn = cx_Oracle.makedsn(host, port, service_name=service_nm)

        # Establish a connection
        connection = cx_Oracle.connect(user=user_name, password=passwd, dsn=dsn)
        cursor = connection.cursor()

        # PCDS Query
        pcds_query = """
        SELECT EXTNL_ACCT_ID, PAST_DUE_151_180_AMT
        FROM dmt_asp_dba.asp_eom_acct_sum
        WHERE ROWNUM <= 1000
        """
        cursor.execute(pcds_query)
        pcds_rows = cursor.fetchall()
        pcds_columns = [desc[0] for desc in cursor.description]
        pcds_df = pd.DataFrame(pcds_rows, columns=pcds_columns)

        cursor.close()
        connection.close()

        if pcds_df.empty:
            raise ValueError("PCDS query returned no data.")

        return pcds_df

    except Exception as e:
        print(f"Error while fetching data from PCDS: {e}")
        raise

def fetch_hive_intermediate_data():
    try:
        # Hive intermediate query
        hive_query = """
        SELECT EXTNL_ACCT_ID, INTERMEDIATE_COL1, INTERMEDIATE_COL2
        FROM usrf_ingest.hive_intermediate_table
        LIMIT 1000
        """

        # Execute Hive query and capture output
        hive_command = f"hive -e \"{hive_query}\""
        result = subprocess.run(hive_command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

        # Process Hive query output
        lines = result.stdout.strip().split('\n')
        rows = [line.split('\t') for line in lines]

        if rows:
            columns = rows[0]
            data = rows[1:]
            hive_df = pd.DataFrame(data, columns=columns)
            return hive_df
        else:
            raise ValueError("Hive intermediate query returned no data.")

    except subprocess.CalledProcessError as e:
        print(f"Error executing Hive intermediate query: {e.stderr}")
        raise

def merge_pcds_hive_intermediate(output_path):
    try:
        pcds_df = fetch_pcds_data()
        hive_intermediate_df = fetch_hive_intermediate_data()

        # Merge PCDS and Hive Intermediate Data
        merged_df = pd.merge(pcds_df, hive_intermediate_df, on="EXTNL_ACCT_ID", how="outer")
        
        # Save merged data to CSV
        merged_output_path = output_path.replace(".csv", "_merged.csv")
        merged_df.to_csv(merged_output_path, index=False)
        
        print(f"Merged PCDS and Hive Intermediate data saved to {merged_output_path}")
        return merged_output_path
    except Exception as e:
        print(f"Error merging and saving PCDS and Hive Intermediate data: {e}")
        raise

# Example usage
output_file = "output_data.csv"
merge_pcds_hive_intermediate(output_file)
