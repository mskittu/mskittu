#!/usr/bin/env python3
# fetch_dataset_def.py
# Run from PyCharm or terminal. Requires: pip install requests

import base64, datetime, json, pathlib, sys, requests
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

# --------- CONFIGURE THESE ------------
BASE_URL = "https://<your-uat-host>"   # e.g. https://uat-api.example.com
DATASETTYPE = "uscb_nfloans_rdp_db"
NAME = "uscb_nfloans_rdp_db_pop_in_address_detail"

AUTH_SCHEME = "basic"   # "basic" or "bearer"
USER = "<username>"     # if using basic
PASSWORD = "<password>" # if using basic
BEARER_TOKEN = ""       # if using bearer

VERIFY_SSL = False      # set False for UAT/self-signed certs
TIMEOUT = 30

# Local save path (your requested path)
OUT_DIR = pathlib.Path(r"C:\user\mrmr1\document\POC")
# --------------------------------------

ENDPOINT_TEMPLATE = "/data/fabric/catalogue/v1/datasettype/{datasettype}/datasetdefinition/{name}"

def build_session():
    s = requests.Session()
    retries = Retry(total=5, backoff_factor=0.5,
                    status_forcelist=[429, 500, 502, 503, 504],
                    allowed_methods=["GET", "HEAD", "OPTIONS"])
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.mount("http://", HTTPAdapter(max_retries=retries))
    return s

def make_auth_header():
    if AUTH_SCHEME.lower() == "basic":
        token = base64.b64encode(f"{USER}:{PASSWORD}".encode()).decode()
        return {"Authorization": f"Basic {token}"}
    elif AUTH_SCHEME.lower() == "bearer":
        return {"Authorization": f"Bearer {BEARER_TOKEN}"}
    return {}

def save_json(data, path: pathlib.Path):
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def fetch_json(url, headers):
    with build_session() as s:
        r = s.get(url, headers=headers, timeout=TIMEOUT, verify=VERIFY_SSL)
        if r.status_code == 401:
            sys.exit("❌ Unauthorized (401). Check your username/password or bearer token.")
        r.raise_for_status()
        return r.json()

def main():
    headers = {"Accept": "application/json"}
    headers.update(make_auth_header())

    url = BASE_URL.rstrip("/") + ENDPOINT_TEMPLATE.format(datasettype=DATASETTYPE, name=NAME)
    print(f"➡ Fetching: {url}")

    data = fetch_json(url, headers)
    ts = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    out_file = OUT_DIR / f"datasetdefinition_{DATASETTYPE}_{NAME}_{ts}.json"

    save_json(data, out_file)
    print(f"✅ Saved JSON -> {out_file}")

if __name__ == "__main__":
    main()
