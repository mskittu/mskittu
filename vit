import subprocess
import csv

def get_hive_table_count():
    try:
        # Define the output file
        output_file = "/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/job/fin_recon/mds_daily_tbl_recon/0.9/source/target_count.csv"

        # Hive query
        hive_query = """
        SELECT 'acct_tbal_prcng_b_eoc_fact' AS table_name, COUNT(*) AS count
        FROM usrf_ingest.cds_acct_tbal_prcng_b_eoc_fact
        UNION ALL
        SELECT 'acct_tbal_prcng_c_eoc_fact' AS table_name, COUNT(*) AS count
        FROM usrf_ingest.cds_acct_thal_prcng_c_eoc_fact
        """.strip()

        # Hive command
        hive_command = f"hive -e \"{hive_query}\""
        process = subprocess.Popen(
            hive_command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        # Capture output and errors
        stdout, stderr = process.communicate()

        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, hive_command, stderr)

        # Decode the output and parse it
        result = stdout.decode('utf-8').strip()
        if not result:
            print("No output from Hive query. Please check the query and Hive setup.")
            return None

        lines = result.split("\n")
        hive_results = []

        for line in lines:
            if line.strip():  # Avoid empty lines
                parts = line.split("\t")  # Assuming tab-separated output
                table_name = parts[0]
                count = int(parts[1])
                hive_results.append((table_name, count))

        # Write results to the CSV file with headers
        with open(output_file, mode='w', newline='') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(["Hive_Table_Name", "Count"])  # Header row
            for table_name, count in hive_results:
                writer.writerow([table_name, count])

        print(f"Hive query results written to '{output_file}'.")
        return hive_results

    except subprocess.CalledProcessError as e:
        print("There was an error executing the Hive query.")
        print("Error message:", e.stderr.decode('utf-8') if e.stderr else "No error message available")
        return None
