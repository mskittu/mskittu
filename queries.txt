SELECT COUNT(*) FROM SYS.EMPLOYEE WHERE EMPID=1
SELECT COUNT(*) FROM SYS.DEPART WHERE DEPT_ID=2

import os
import cx_Oracle
import pandas as pd
import subprocess
from pyspark.sql import SparkSession
from pyspark.sql import DataFrame

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("PPNR Accuracy Report") \
    .enableHiveSupport() \
    .getOrCreate()

def fetch_pcds_data():
    try:
        # Oracle connection details
        db_name = "CDS"
        user_var = f"USERNAME_{db_name}"
        passwd_var = f"PWD_{db_name}"
        service_var = f"CONNECT_STRING_{db_name}"
        user_name = os.environ[user_var]
        passwd = os.environ[passwd_var]
        service_nm = os.environ[service_var]

        # Parse the service string
        service_nm = service_nm[service_nm.index('@') + 1:]
        host = service_nm[0:service_nm.index(':')]
        port = service_nm[service_nm.index(':') + 1:service_nm.index('/')]
        service_nm = service_nm[service_nm.index('/') + 1:]

        # Create a DSN
        dsn = cx_Oracle.makedsn(host, port, service_name=service_nm)

        # Establish a connection
        connection = cx_Oracle.connect(user=user_name, password=passwd, dsn=dsn)
        cursor = connection.cursor()

        query = """
        SELECT extrnl_acct_id, past_due_151_180_amt
        FROM dmt_aspp_dba.asp_eom_acct_sum1
        WHERE ROWNUM <= 1000
        """

        cursor.execute(query)
        rows = cursor.fetchall()

        columns = [desc[0] for desc in cursor.description]
        data_df = pd.DataFrame(rows, columns=columns)

        cursor.close()
        connection.close()

        return data_df

    except Exception as e:
        print(f"Error while fetching data from PCDS: {e}")
        return None

def ensure_hdfs_file(output_file):
    try:
        # Check if the file exists in HDFS
        check_command = f"hdfs dfs -test -e {output_file}"
        result = subprocess.run(check_command, shell=True)

        # If the file does not exist, create it
        if result.returncode != 0:
            print(f"File {output_file} does not exist in HDFS. Creating file...")
            # Create a placeholder CSV file locally
            placeholder_file = "/tmp/placeholder.csv"
            with open(placeholder_file, "w") as f:
                f.write("extrnl_acct_id,past_due_151_180_amt\n")  # Add column headers
            
            # Create HDFS directory and upload placeholder file
            create_dir_command = f"hdfs dfs -mkdir -p {os.path.dirname(output_file)}"
            subprocess.run(create_dir_command, shell=True, check=True)

            upload_file_command = f"hdfs dfs -put {placeholder_file} {output_file}"
            subprocess.run(upload_file_command, shell=True, check=True)

            print(f"Placeholder file created and uploaded to {output_file}.")
        else:
            print(f"File {output_file} already exists in HDFS.")

    except Exception as e:
        print(f"Error while ensuring HDFS file: {e}")
        raise

def fetch_and_compare_data(target_table, key_columns):
    try:
        # Fetch data from PCDS
        source_data = fetch_pcds_data()
        if source_data is None or source_data.empty:
            raise ValueError("No data fetched from PCDS.")

        source_df = spark.createDataFrame(source_data)

        # Specify the HDFS file path
        output_file = "hdfs://nameservice1/user/x01532741/hive_output.csv"

        # Ensure the HDFS file exists
        ensure_hdfs_file(output_file)

        # Read Hive query result into a DataFrame
        target_df = spark.read.csv(output_file, header=True, inferSchema=True)

        # Select 1000 accounts for comparison
        pcds_source_df = source_df.limit(1000)
        hive_target_df = target_df.limit(1000)

        # Compare data
        mismatches = pcds_source_df.join(hive_target_df, key_columns, how="outer") \
            .filter((pcds_source_df[key_columns[0]].isNull()) | (hive_target_df[key_columns[0]].isNull()))

        return mismatches

    except Exception as e:
        print(f"Error in fetch_and_compare_data: {e}")
        raise

def generate_accuracy_report(mismatches: DataFrame, total_records: int):
    try:
        mismatch_count = mismatches.count()
        accuracy = (1 - mismatch_count / total_records) * 100

        accuracy_report_path = "ppnr_accuracy_report.csv"
        with open(accuracy_report_path, "a") as report_file:
            report_file.write(f"Accuracy for PPNR: {accuracy:.2f}%\n")

        print(f"Accuracy for PPNR: {accuracy:.2f}% written to {accuracy_report_path}")

    except Exception as e:
        print(f"Error while generating accuracy report: {e}")
        raise

# Define source and target tables and attributes to compare
hive_table = "cds_acct_c1"
key_columns = ["extrnl_acct_id"]

try:
    mismatches = fetch_and_compare_data(hive_table, key_columns)
    generate_accuracy_report(mismatches, 1000)
except Exception as e:
    print(f"Error during execution: {e}")

spark.stop()
