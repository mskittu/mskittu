import cx_Oracle
import pandas as pd
from datetime import datetime

# Oracle Database Connection Details
host = "your_host"
port = "your_port"
service_name = "your_service_name"
username = "your_username"
password = "your_password"

# Tables to count
table_names = ["signal", "another_table", "third_table"]

# CSV File Details
csv_file_path = "source_count.csv"

def get_table_counts(table_names):
    counts = {}
    try:
        # Connect to Oracle Database
        dsn = cx_Oracle.makedsn(host, port, service_name=service_name)
        connection = cx_Oracle.connect(username, password, dsn)
        cursor = connection.cursor()
        
        # Get row counts for each table
        for table in table_names:
            try:
                query = f"SELECT COUNT(*) FROM {table}"
                cursor.execute(query)
                counts[table] = cursor.fetchone()[0]
            except cx_Oracle.DatabaseError as e:
                print(f"Error occurred while querying table {table}: {e}")
                counts[table] = None  # Mark table count as None in case of error

        # Close connections
        cursor.close()
        connection.close()
    except cx_Oracle.DatabaseError as e:
        print(f"Database error occurred: {e}")

    return counts

def append_counts_to_csv(counts):
    try:
        # Prepare data to append
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data = {"Timestamp": [timestamp]}
        for table, count in counts.items():
            data[table] = [count]

        new_data = pd.DataFrame(data)

        # Append to CSV
        try:
            # Load existing CSV if it exists
            df = pd.read_csv(csv_file_path)
            df = pd.concat([df, new_data], ignore_index=True)
        except FileNotFoundError:
            # Create new file if CSV does not exist
            df = new_data

        df.to_csv(csv_file_path, index=False)
        print(f"Appended counts to {csv_file_path}")
    except Exception as e:
        print(f"Error occurred while writing to CSV: {e}")

if __name__ == "__main__":
    # Fetch counts for multiple tables
    counts = get_table_counts(table_names)
    if counts:
        # Append the counts to the CSV
        append_counts_to_csv(counts)



---shell script ----

#!/bin/bash

# Oracle Database Connection Details
HOST="your_host"
PORT="your_port"
SERVICE_NAME="your_service_name"
USERNAME="your_username"
PASSWORD="your_password"

# Tables to count
TABLES=("signal" "another_table" "third_table")

# CSV File Details
CSV_FILE="source_count.csv"

# Function to fetch row count for a table
get_table_count() {
    local table_name=$1
    count=$(sqlplus -s "$USERNAME/$PASSWORD@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=$HOST)(PORT=$PORT))(CONNECT_DATA=(SERVICE_NAME=$SERVICE_NAME)))" <<EOF
SET HEADING OFF
SET FEEDBACK OFF
SELECT COUNT(*) FROM $table_name;
EXIT;
EOF
    )
    echo "$count"
}

# Main Script Execution
{
    # Add a timestamp to the row
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    ROW="$TIMESTAMP"

    # Fetch counts for each table
    for table in "${TABLES[@]}"; do
        count=$(get_table_count "$table")
        # Handle errors
        if [[ -z $count || $count == "ORA-"* ]]; then
            echo "Error fetching count for table $table" >&2
            count="ERROR"
        fi
        ROW="$ROW,$count"
    done

    # Append the results to the CSV file
    if [[ ! -f $CSV_FILE ]]; then
        # Write header if the file doesn't exist
        HEADER="Timestamp"
        for table in "${TABLES[@]}"; do
            HEADER="$HEADER,$table"
        done
        echo "$HEADER" > "$CSV_FILE"
    fi

    # Append the row
    echo "$ROW" >> "$CSV_FILE"
    echo "Appended counts to $CSV_FILE"
} 2>error.log
