import os
import subprocess

# File paths
hive_query_file = '/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/job/fin_recon/mds_daily_tbl_recon/0.9/conf/hive_query_file.txt'
output_file = '/apps/tenant_local/usrf_stg/HadoopSandbox/x01532741/job/fin_recon/mds_daily_tbl_recon/0.9/source/target_count.csv'

# Date range for partition filtering
first_date = '2024-01-01'  # Example date
last_date = '2024-12-31'  # Example date

def get_hive_query_from_file(query_file, first_date, last_date):
    """
    Reads the Hive query from the file and formats the dates dynamically.
    """
    try:
        # Read the Hive query from the provided file
        with open(query_file, 'r') as file:
            hive_query = file.read()

        # Format the query by replacing placeholders with actual dates
        formatted_query = hive_query.format(first_date=first_date, last_date=last_date)

        return formatted_query
    except Exception as e:
        print(f"Error reading Hive query file: {e}")
        return None


def get_hive_table_count():
    """
    Executes the Hive query to get table counts.
    """
    try:
        # Get the formatted Hive query from the file
        hive_query = get_hive_query_from_file(hive_query_file, first_date, last_date)
        if not hive_query:
            print("Failed to retrieve and format the Hive query.")
            return None

        # Execute the Hive command using subprocess
        print(f"Executing Hive query from {hive_query_file}...")
        hive_command = f"hive -e \"{hive_query}\" > {output_file}"
        subprocess.run(hive_command, shell=True, check=True)

        # Parse results from the Hive output file
        results = []
        with open(output_file, 'r') as file:
            for line in file.readlines():
                table_name, count = line.strip().split('\t')
                results.append((table_name, int(count)))

        return results

    except subprocess.CalledProcessError as e:
        print(f"Error executing Hive query: {e}")
        return None

    except Exception as e:
        print(f"Error during Hive processing: {e}")
        return None


if __name__ == "__main__":
    # Get the Hive table counts
    hive_counts = get_hive_table_count()

    if hive_counts:
        print("Hive counts retrieved successfully:")
        for table_name, count in hive_counts:
            print(f"Table: {table_name}, Count: {count}")
    else:
        print("Failed to retrieve Hive counts.")
