import cx_Oracle
import csv

def get_oracle_table_counts_from_file(query_file):
    try:
        # Oracle connection details
        username = "sys"  # Admin user
        password = "Kittu@$1980"
        hostname = "localhost"
        port = "1521"
        service_name = "ORCL"  # Replace with your Oracle service name

        # Create a DSN (Data Source Name)
        dsn = cx_Oracle.makedsn(hostname, port, service_name=service_name)

        # Establish a connection as SYSDBA
        connection = cx_Oracle.connect(user=username, password=password, dsn=dsn, mode=cx_Oracle.SYSDBA)
        cursor = connection.cursor()

        # Read queries from the provided file
        with open(query_file, 'r') as file:
            queries = file.readlines()

        results = []
        for query in queries:
            query = query.strip().rstrip(';')  # Remove trailing whitespace and semicolon
            if query:
                # Extract the table name from the query
                table_name = query.split("FROM")[1].strip()
                print(f"Executing Oracle query: {query}")
                cursor.execute(query)
                result = cursor.fetchone()  # Fetch the result (COUNT)
                results.append((table_name, result[0]))  # Append table name and count result

        # Append results to the CSV file
        csv_file_name = 'oracle_query_results.csv'
        with open(csv_file_name, mode='a', newline='') as csv_file:
            writer = csv.writer(csv_file)
            # Write the header only if the file is empty
            if csv_file.tell() == 0:
                writer.writerow(["Oracle_Table_Name", "Count"])  # Header row
            for table_name, count in results:
                writer.writerow([table_name, count])

        print(f"Oracle query results appended to '{csv_file_name}'.")
        return results

    except cx_Oracle.DatabaseError as e:
        print("There was a problem connecting to the Oracle database or executing the queries:", e)
        return None

    finally:
        # Ensure resources are cleaned up
        if 'cursor' in locals() and cursor is not None:
            cursor.close()
        if 'connection' in locals() and connection is not None:
            connection.close()
